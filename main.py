# -*- coding: utf-8 -*-
# Задание:
#
# Чем больше компания, тем больше людей заинтересованы в ней и не всегда с лучшими намерениями.
# В связи с этим вам было поручено позаботится о сотрудниках Urban'а, написав часть приложения,
# которая не позволит злоумышленникам(даже если у них есть доступ к камере)
# следить за их рабочими процессами и личной жизнью.
#
# Частью вашей работы будет сокрытие взгляда при помощи инструментов компьютерного зрения и нейронных сетей.
#
# Конечно же дизайнеры позаботились о вас и привели примеры, как должен выглядеть результат (1 кадр)
# Техническое задание:
# Вся программа должна работать с видеопотоком (не с 1 картинкой).
# Для распознавания глаз используйте каскад Хаара, который находится в свободном доступе - GitHub OpenCV.
# Глаза должны быть размыты так, чтобы были видны только их очертания (рекомендуется разное размытие по осям x и y)
# Область глаз должна быть шире чем сами глаза (как в примере).
# Область глаз должна быть чёрно-белого формата (как в примере).
# Поставленную задачу можно решить как с применением масок, так и без них.
#
# Примечания:
# Предложенный каскад Хаара предполагает нахождение каждого глаза по отдельности,
# следует вычислить координаты одной области при переборе найденных координат
# (минимальную и максимальную точки по осям x и y).
# Помните, при наложении изображений(массивов) разных цветовых форматов(размерности) происходит ошибка.
# Например: BGR  - (42, 69, 11), GRAY - (23) не совпадают размерности вложенных массивов.
# Пришлите ссылку на репозиторий GitHub с соответствующими кодом отрисовки и примерами кадров на разных расстояниях.
#
# Помните, что веткой по умолчанию (default) должна быть выбрана та, где находятся необходимые файлы.


import cv2 as cv


cap = cv.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

while True:
    success, img = cap.read()
    gray_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)  # в серый цвет
    faces = cv.CascadeClassifier('haarcascade_eye.xml')

    results = faces.detectMultiScale(gray_img, scaleFactor=1.7, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in results:

        square = cv.rectangle(img.copy(), (x - 55, y), (x + w + 30, y + h), (150, 150, 150), thickness=-1)
        cv.blur(square.copy(), (5, 5))
        img = cv.bitwise_and(img, square)

    cv.imshow('Result', img)

    if cv.waitKey(1) & 0xFF == ord('q'):  # ord отслеживает код клавиши "q"
        break

cv.destroyAllWindows()
cv.imwrite("image_eye_1.jpg", img)
